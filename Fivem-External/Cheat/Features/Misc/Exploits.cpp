#include "Exploits.hpp"
#include "../../Options.hpp"
#include <Windows.h>
#include <chrono>
#include "../../FivemSDK/Fivem.hpp"
#include "../../Options.hpp"
#include <cmath>
#include <optional>
#include <utility>
#include <vector>

bool TPVehicle = false;
uint64_t TPModelInfo = NULL;
uint64_t TPObject = NULL;
uint64_t TPNavigation = NULL;
Vector3D TPPosition = Vector3D(0, 0, 0);

namespace Cheat
{
	void Noclip(Vector3D CameraPos)
	{
		if (!TPObject)
			return;

		if (!TPModelInfo)
			return;

		static float MagicValue = 0.0f;
		static bool Restoring = false;


		if (!g_Options.Misc.Exploits.LocalPlayer.Noclip || !GetAsyncKeyState(g_Options.Misc.Exploits.LocalPlayer.NoclipBind))
		{
			if (g_Options.Misc.Exploits.LocalPlayer.InvisibleNC)
			{
				g_Options.Misc.Exploits.LocalPlayer.invisible = false;
			}
			if (Restoring)
			{
				FrameWork::Memory::WriteMemory(TPModelInfo + 0x2C, MagicValue);
			}
			Restoring = false;
			return;
		}

		if (!Restoring)
		{
			if (g_Options.Misc.Exploits.LocalPlayer.InvisibleNC)
			{
				g_Options.Misc.Exploits.LocalPlayer.invisible = true;
			}
			MagicValue = FrameWork::Memory::ReadMemory<float>(TPModelInfo + 0x2C);
			FrameWork::Memory::WriteMemory(TPModelInfo + 0x2C, 0.f);
			Restoring = true;
		}

		auto Speed = static_cast<float>(g_Options.Misc.Exploits.LocalPlayer.NoclipSpeed) / 100.f;

		if (GetAsyncKeyState(VK_SHIFT))
		{
			Speed *= 5.f;
		}

		Vector3D NewPosition = TPPosition;

		if (GetAsyncKeyState('W'))
		{
			NewPosition.x += (CameraPos * Speed).x;
			NewPosition.y += (CameraPos * Speed).y;
			NewPosition.z += (CameraPos * Speed).z;
		}

		if (GetAsyncKeyState('S'))
		{
			NewPosition.x -= (CameraPos * Speed).x;
			NewPosition.y -= (CameraPos * Speed).y;
			NewPosition.z -= (CameraPos * Speed).z;
		}

		Vector3D Right = CameraPos.Cross(Vector3D(0, 0, 1));

		if (GetAsyncKeyState('A'))
		{
			NewPosition.x -= (Right * Speed).x;
			NewPosition.y -= (Right * Speed).y;
			NewPosition.z -= (Right * Speed).z;
		}

		if (GetAsyncKeyState('D'))
		{
			NewPosition.x += (Right * Speed).x;
			NewPosition.y += (Right * Speed).y;
			NewPosition.z += (Right * Speed).z;
		}

		if (GetAsyncKeyState(VK_SPACE))
		{
			NewPosition.z += (Speed);
		}

		if (GetAsyncKeyState(VK_LCONTROL))
		{
			NewPosition.z -= (Speed);
		}

		g_Fivem.TeleportObject(TPObject, TPNavigation, 0, NewPosition, NewPosition, false);
	}

	void Exploits::TeleportToWaypoint()
	{
		for (int i = 0; i < 2000; i++)
		{
			uint64_t Blip = FrameWork::Memory::ReadMemory<uint64_t>(g_Fivem.GetBlipListAddress() + (i * 8));
			if (!Blip)
				continue;

			int BlipIcon = FrameWork::Memory::ReadMemory<int>(Blip + 0x40);
			int BlipColor = FrameWork::Memory::ReadMemory<int>(Blip + 0x48);

			if ((BlipColor != BlipColor::ColorWaypoint) || (BlipIcon != BlipSprite::SpriteWaypoint))
				continue;

			Vector2D WaypointPos = FrameWork::Memory::ReadMemory<Vector2D>(Blip + 0x10);

			if (WaypointPos.x != 0 && WaypointPos.y != 0)
			{
				uint64_t Object = NULL;
				uint64_t Navigation = NULL;
				uint64_t ModelInfo = NULL;

				if (g_Fivem.GetLocalPlayerInfo().Ped->HasConfigFlag(CPED_CONFIG_FLAG_InVehicle))
				{
					CVehicle* Vehicle = g_Fivem.GetLocalPlayerInfo().Ped->GetLastVehicle();
					if (Vehicle)
					{
						Object = (uint64_t)Vehicle;
						Navigation = Vehicle->GetNavigation();
						ModelInfo = Vehicle->GetModelInfo();
					}
				}

				if (!Object || !Navigation || !ModelInfo)
				{
					Object = (uint64_t)g_Fivem.GetLocalPlayerInfo().Ped;
					Navigation = g_Fivem.GetLocalPlayerInfo().Ped->GetNavigation();
					ModelInfo = g_Fivem.GetLocalPlayerInfo().Ped->GetModelInfo();
				}

				Vector3D TeleportPos = Vector3D(WaypointPos.x, WaypointPos.y, -210.f);

				g_Fivem.TeleportObject(Object, Navigation, ModelInfo, TeleportPos, TeleportPos, true);
			}
		}
	}

	struct CarInfo {
		uintptr_t carInfo;
		float defaultSpeed;
		float defaultTraction;
	};

	std::vector<CarInfo> carList;

	const CarInfo* findCarByInfo(uintptr_t carInfo) {
		for (const CarInfo& car : carList) {
			if (car.carInfo == carInfo) {
				return &car;
			}
		}
		return nullptr;
	}


	uintptr_t first_Flag = 0;


	struct CameraData {
		uint64_t cameraData;
		float defaultFov;
	};

	std::vector<CameraData> cameraList;

	const CameraData* findCameraByData(uint64_t cameraData)
	{
		for (const CameraData& camera : cameraList) {
			if (camera.cameraData == cameraData) {
				return &camera;
			}
		}
		return nullptr;
	}


	void Exploits::RunThread()
	{
		while (!g_Options.General.ShutDown)
		{
			uintptr_t weaponinfo = FrameWork::Memory::ReadMemory<uintptr_t>(WeaponManager + 0x20);
			uintptr_t playerInfo = FrameWork::Memory::ReadMemory<uintptr_t>(g_Fivem.GetLocalPlayerInfo().Ped + PlayerInfo);
			if (!g_Fivem.GetLocalPlayerInfo().Ped)
				continue;

			if (g_Options.Misc.Exploits.LocalPlayer.Start_Health)
			{
				g_Fivem.GetLocalPlayerInfo().Ped->SetHealth(g_Options.Misc.Exploits.LocalPlayer.health_ammount);

				g_Options.Misc.Exploits.LocalPlayer.Start_Health = false;
			}

			if (GetAsyncKeyState(g_Options.Misc.Exploits.LocalPlayer.unlockbind) & 0x8000)
			{
				Cheat::VehicleInfo nearestVehicle;
				float minDistance = FLT_MAX;

				if (Cheat::g_Fivem.GetLocalPlayerInfo().Ped != nullptr)
				{
					for (Cheat::VehicleInfo Current : Cheat::g_Fivem.GetVehicleList())
					{
						if (Current.Vehicle != nullptr)
						{
							float distance = Current.Vehicle->GetCoordinate().DistTo(Cheat::g_Fivem.GetLocalPlayerInfo().WorldPos);

							if (distance < minDistance && distance < 600.0f)
							{
								minDistance = distance;
								nearestVehicle = Current;
							}
						}
					}

					if (nearestVehicle.Vehicle != nullptr)
					{
						nearestVehicle.Vehicle->SetDoorLock(1);
					}
				}
			}

			if (g_Options.Misc.Exploits.LocalPlayer.infinitestamina)
			{
				uintptr_t playerinfo = FrameWork::Memory::ReadMemory<uintptr_t>(g_Fivem.GetLocalPlayerInfo().Ped + 0x10C8);
				FrameWork::Memory::WriteMemory<float>(playerinfo + 0x0CF4, -1);
			}
			else
			{
				uintptr_t playerinfo = FrameWork::Memory::ReadMemory<uintptr_t>(g_Fivem.GetLocalPlayerInfo().Ped + 0x10C8);
				FrameWork::Memory::WriteMemory<float>(playerinfo + 0x0CF4, 100);
			}

			if (g_Options.Misc.Exploits.LocalPlayer.shrink)
			{
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_UseAmbientModelScaling, true);
			}
			else
			{
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_UseAmbientModelScaling, false);
			}

			if (g_Options.Misc.Exploits.LocalPlayer.usegodmodebind)
			{
				if (GetAsyncKeyState(g_Options.Misc.Exploits.LocalPlayer.godbind) & 0x8000) {
					if (g_Options.Misc.Exploits.LocalPlayer.God) {
						g_Fivem.GetLocalPlayerInfo().Ped->godmode_off(false);
					}
					else {
						g_Fivem.GetLocalPlayerInfo().Ped->godmode_on(true);
					}
					g_Options.Misc.Exploits.LocalPlayer.God = !g_Options.Misc.Exploits.LocalPlayer.God;
					Sleep(500);
				}
			}

			if (!first_Flag)
				first_Flag = FrameWork::Memory::ReadMemory<float>(g_Fivem.GetLocalPlayerInfo().Ped->GetPlayerInfo() + 0x280);

			if (g_Options.Misc.Exploits.LocalPlayer.superjump) {
				uint32_t previous_frame_flags = FrameWork::Memory::ReadMemory<float>(g_Fivem.GetLocalPlayerInfo().Ped->GetPlayerInfo() + 0x280);
				FrameWork::Memory::WriteMemory<uint32_t>(g_Fivem.GetLocalPlayerInfo().Ped->GetPlayerInfo() + 0x270, previous_frame_flags |
					(g_Options.Misc.Exploits.LocalPlayer.superjump ? 1 << 14 : 0));
			}
			auto adr = FrameWork::Memory::ReadMemory<uint64_t>(g_Fivem.Camera2);
			uint64_t CamData = FrameWork::Memory::ReadMemory<uint64_t>(adr + 0x10);

			if (!findCameraByData(CamData)) {
				CameraData currentCamera;
				currentCamera.cameraData = CamData;
				currentCamera.defaultFov = FrameWork::Memory::ReadMemory<float>(CamData + 0x30);
				cameraList.push_back(currentCamera);
			}

			if (g_Options.Misc.Exploits.LocalPlayer.custom_fov)
			{
				FrameWork::Memory::WriteMemory<float>(CamData + 0x30, g_Options.Misc.Exploits.LocalPlayer.fov_value);
			}
			else {
				FrameWork::Memory::WriteMemory<float>(CamData + 0x30, 50.f);
			}

			if (g_Options.Misc.Exploits.LocalPlayer.noragdoll)
			{
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromAnyPedImpact, true);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromVehicleImpact, true);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromBulletImpact, true);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromExplosions, true);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromFire, true);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromElectrocution, true);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_CanActivateRagdollWhenVehicleUpsideDown, true);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromImpactObject, true);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromMelee, true);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromWaterJet, true);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromDrowning, true);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromFalling, true);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromRubberBullet, true);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollOnPedCollisionWhenDead, true);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollOnVehicleCollisionWhenDead, true);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromDrowning, true);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromDrowning, true);
			}
			else
			{
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromAnyPedImpact, false);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromVehicleImpact, false);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromBulletImpact, false);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromExplosions, false);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromFire, false);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromElectrocution, false);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_CanActivateRagdollWhenVehicleUpsideDown, false);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromImpactObject, false);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromMelee, false);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromWaterJet, false);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromDrowning, false);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromFalling, false);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromRubberBullet, false);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollOnPedCollisionWhenDead, false);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollOnVehicleCollisionWhenDead, false);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromDrowning, false);
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_DontActivateRagdollFromDrowning, false);
			}

			if (g_Options.Misc.Exploits.LocalPlayer.nocollision)
			{

				uint64_t navig = FrameWork::Memory::ReadMemory<uint64_t>(g_Fivem.GetLocalPlayerInfo().Ped + 0x30);

				uint64_t addr1 = navig;
				if (addr1) {
					uint64_t addr2 = FrameWork::Memory::ReadMemory<uint64_t>(addr1 + 0x10);
					if (addr2) {
						uint64_t addr3 = FrameWork::Memory::ReadMemory<uint64_t>(addr2 + 0x20);
						if (addr3) {
							uint64_t addr4 = FrameWork::Memory::ReadMemory<uint64_t>(addr3 + 0x70);
							if (addr4) {
								uint64_t addr5 = FrameWork::Memory::ReadMemory<uint64_t>(addr4 + 0x0);
								if (addr5) {
									FrameWork::Memory::WriteMemory<float>(addr5 + 0x2C, -1.0f);
								}
							}
						}
					}
				}
			}
			else
			{
				uint64_t navig = FrameWork::Memory::ReadMemory<uint64_t>(g_Fivem.GetLocalPlayerInfo().Ped + 0x30);

				uint64_t addr1 = navig;
				if (addr1) {
					uint64_t addr2 = FrameWork::Memory::ReadMemory<uint64_t>(addr1 + 0x10);
					if (addr2) {
						uint64_t addr3 = FrameWork::Memory::ReadMemory<uint64_t>(addr2 + 0x20);
						if (addr3) {
							uint64_t addr4 = FrameWork::Memory::ReadMemory<uint64_t>(addr3 + 0x70);
							if (addr4) {
								uint64_t addr5 = FrameWork::Memory::ReadMemory<uint64_t>(addr4 + 0x0);
								if (addr5) {
									FrameWork::Memory::WriteMemory<float>(addr5 + 0x2C, 0.25f);
								}
							}
						}
					}
				}
			}

			if (g_Options.Misc.Exploits.LocalPlayer.God)
			{
				g_Fivem.GetLocalPlayerInfo().Ped->godmode_on(g_Options.Misc.Exploits.LocalPlayer.God);
			}
			if (!g_Options.Misc.Exploits.LocalPlayer.God)
			{
				g_Fivem.GetLocalPlayerInfo().Ped->godmode_off(g_Options.Misc.Exploits.LocalPlayer.God);
			}

			if (g_Options.Misc.Exploits.LocalPlayer.antihs)
			{
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_NoCriticalHits, true);
			}
			else
			{
				g_Fivem.GetLocalPlayerInfo().Ped->SetConfigFlag(CPED_CONFIG_FLAG_NoCriticalHits, false);
			}

			auto Vehicle = (uint64_t)g_Fivem.GetLocalPlayerInfo().Ped->GetLastVehicle();
			if (Vehicle)
			{
				auto VehDriver = ((CVehicle*)Vehicle)->GetDriver();
				if (VehDriver == (uint64_t)g_Fivem.GetLocalPlayerInfo().Ped)
				{
					TPVehicle = true;
					TPModelInfo = ((CVehicle*)Vehicle)->GetModelInfo();
					TPObject = Vehicle;
					TPNavigation = ((CVehicle*)Vehicle)->GetNavigation();
					TPPosition = ((CVehicle*)Vehicle)->GetCoordinate();
				}
				else
				{
					TPVehicle = false;
				}
			}

			if (!findCarByInfo(Vehicle))
			{
				CarInfo currentCar;
				currentCar.carInfo = Vehicle;
				currentCar.defaultTraction = FrameWork::Memory::ReadMemory<float>(g_Fivem.GetLocalPlayerInfo().Ped->GetLastVehicle()->GetHandling() + 0x90);
				currentCar.defaultSpeed = FrameWork::Memory::ReadMemory<float>(g_Fivem.GetLocalPlayerInfo().Ped->GetLastVehicle()->GetHandling() + 0x4C);

				carList.push_back(currentCar);
			}

			auto handling = FrameWork::Memory::ReadMemory<uintptr_t>(Vehicle + 0x960);

			if (g_Options.Misc.Exploits.m_Vehicle.b_Vehicle)
			{
				FrameWork::Memory::WriteMemory<float>(g_Fivem.GetLocalPlayerInfo().Ped->GetLastVehicle()->GetHandling() + 0x90, g_Options.Misc.Exploits.m_Vehicle.v_Traction); //Traction
				FrameWork::Memory::WriteMemory<float>(g_Fivem.GetLocalPlayerInfo().Ped->GetLastVehicle()->GetHandling() + 0x4C, g_Options.Misc.Exploits.m_Vehicle.v_Boost); //Boost
			}
			else
			{
				FrameWork::Memory::WriteMemory<float>(g_Fivem.GetLocalPlayerInfo().Ped->GetLastVehicle()->GetHandling() + 0x90, findCarByInfo(Vehicle)->defaultTraction); //Traction
				FrameWork::Memory::WriteMemory<float>(g_Fivem.GetLocalPlayerInfo().Ped->GetLastVehicle()->GetHandling() + 0x4C, findCarByInfo(Vehicle)->defaultSpeed); //Boost
			}

			if (g_Options.Misc.Exploits.LocalPlayer.invisible)
			{
				float localPlayerHealth = FrameWork::Memory::ReadMemory<float>(g_Fivem.GetLocalPlayerInfo().Ped + 0x280);
				if (localPlayerHealth > 1)
				{
					uintptr_t localPlayer = (uintptr_t)Cheat::g_Fivem.GetLocalPlayerInfo().Ped;
					if (localPlayer)
					{
						FrameWork::Memory::WriteMemory<BYTE>(localPlayer + 0x2C, 0X1);
					}
				}
				else
				{
					float localPlayerHealth = FrameWork::Memory::ReadMemory<float>(g_Fivem.GetLocalPlayerInfo().Ped + 0x280);
					if (localPlayerHealth < 1)
					{

					}
				}
			}

			if (!g_Options.Misc.Exploits.LocalPlayer.invisible)
			{
				float localPlayerHealth = FrameWork::Memory::ReadMemory<float>(g_Fivem.GetLocalPlayerInfo().Ped + 0x280);
				if (localPlayerHealth > 1)
				{
					uintptr_t localPlayer = (uintptr_t)Cheat::g_Fivem.GetLocalPlayerInfo().Ped;
					if (localPlayer)
					{
						FrameWork::Memory::WriteMemory<BYTE>(localPlayer + 0x2C, 0X37);
					}
				}
				else
				{
					float localPlayerHealth = FrameWork::Memory::ReadMemory<float>(g_Fivem.GetLocalPlayerInfo().Ped + 0x280);
					if (localPlayerHealth < 1)
					{

					}
				}
			}

			if (g_Options.Misc.Exploits.LocalPlayer.speed)
			{
				FrameWork::Memory::WriteMemory<float>(playerInfo + 0x0D40, g_Options.Misc.Exploits.LocalPlayer.speed_value);
			}
			else
			{
				FrameWork::Memory::WriteMemory<float>(playerInfo + 0x0D40, 1.0f);
			}

			if (!TPVehicle)
			{
				TPModelInfo = g_Fivem.GetLocalPlayerInfo().Ped->GetModelInfo();
				TPObject = (uint64_t)g_Fivem.GetLocalPlayerInfo().Ped;
				TPNavigation = g_Fivem.GetLocalPlayerInfo().Ped->GetNavigation();
				TPPosition = g_Fivem.GetLocalPlayerInfo().Ped->GetCoordinate();
			}
			Noclip(g_Fivem.GetCamGameplayDirector()->GetFollowPedCamera()->GetViewAngles());
		}
	}
}